#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'UdpReport'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 38

# The Active Message type associated with this message.
AM_TYPE = -1

class UdpReport(tinyos.message.Message.Message):
    # Create a new UdpReport of size 38.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=38):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <UdpReport> \n"
        try:
            s += "  [seqno=0x%x]\n" % (self.get_seqno())
        except:
            pass
        try:
            s += "  [sender=0x%x]\n" % (self.get_sender())
        except:
            pass
        try:
            s += "  [phymode=0x%x]\n" % (self.get_phymode())
        except:
            pass
        try:
            s += "  [ip.sent=0x%x]\n" % (self.get_ip_sent())
        except:
            pass
        try:
            s += "  [ip.forwarded=0x%x]\n" % (self.get_ip_forwarded())
        except:
            pass
        try:
            s += "  [ip.rx_drop=0x%x]\n" % (self.get_ip_rx_drop())
        except:
            pass
        try:
            s += "  [ip.tx_drop=0x%x]\n" % (self.get_ip_tx_drop())
        except:
            pass
        try:
            s += "  [ip.fw_drop=0x%x]\n" % (self.get_ip_fw_drop())
        except:
            pass
        try:
            s += "  [ip.rx_total=0x%x]\n" % (self.get_ip_rx_total())
        except:
            pass
        try:
            s += "  [ip.encfail=0x%x]\n" % (self.get_ip_encfail())
        except:
            pass
        try:
            s += "  [udp.sent=0x%x]\n" % (self.get_udp_sent())
        except:
            pass
        try:
            s += "  [udp.rcvd=0x%x]\n" % (self.get_udp_rcvd())
        except:
            pass
        try:
            s += "  [udp.cksum=0x%x]\n" % (self.get_udp_cksum())
        except:
            pass
        try:
            s += "  [icmp.sol_rx=0x%x]\n" % (self.get_icmp_sol_rx())
        except:
            pass
        try:
            s += "  [icmp.sol_tx=0x%x]\n" % (self.get_icmp_sol_tx())
        except:
            pass
        try:
            s += "  [icmp.adv_rx=0x%x]\n" % (self.get_icmp_adv_rx())
        except:
            pass
        try:
            s += "  [icmp.adv_tx=0x%x]\n" % (self.get_icmp_adv_tx())
        except:
            pass
        try:
            s += "  [icmp.echo_rx=0x%x]\n" % (self.get_icmp_echo_rx())
        except:
            pass
        try:
            s += "  [icmp.echo_tx=0x%x]\n" % (self.get_icmp_echo_tx())
        except:
            pass
        try:
            s += "  [icmp.unk_rx=0x%x]\n" % (self.get_icmp_unk_rx())
        except:
            pass
        try:
            s += "  [icmp.rx=0x%x]\n" % (self.get_icmp_rx())
        except:
            pass
        try:
            s += "  [route.hop_limit=0x%x]\n" % (self.get_route_hop_limit())
        except:
            pass
        try:
            s += "  [route.parent=0x%x]\n" % (self.get_route_parent())
        except:
            pass
        try:
            s += "  [route.parent_metric=0x%x]\n" % (self.get_route_parent_metric())
        except:
            pass
        try:
            s += "  [route.parent_etx=0x%x]\n" % (self.get_route_parent_etx())
        except:
            pass
        try:
            pass
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: seqno
    #   Field type: long
    #   Offset (bits): 0
    #   Size (bits): 32
    #

    #
    # Return whether the field 'seqno' is signed (False).
    #
    def isSigned_seqno(self):
        return False
    
    #
    # Return whether the field 'seqno' is an array (False).
    #
    def isArray_seqno(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seqno'
    #
    def offset_seqno(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'seqno'
    #
    def offsetBits_seqno(self):
        return 0
    
    #
    # Return the value (as a long) of the field 'seqno'
    #
    def get_seqno(self):
        return self.getUIntElement(self.offsetBits_seqno(), 32, 1)
    
    #
    # Set the value of the field 'seqno'
    #
    def set_seqno(self, value):
        self.setUIntElement(self.offsetBits_seqno(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seqno'
    #
    def size_seqno(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'seqno'
    #
    def sizeBits_seqno(self):
        return 32
    
    #
    # Accessor methods for field: sender
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'sender' is signed (False).
    #
    def isSigned_sender(self):
        return False
    
    #
    # Return whether the field 'sender' is an array (False).
    #
    def isArray_sender(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sender'
    #
    def offset_sender(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'sender'
    #
    def offsetBits_sender(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'sender'
    #
    def get_sender(self):
        return self.getUIntElement(self.offsetBits_sender(), 16, 1)
    
    #
    # Set the value of the field 'sender'
    #
    def set_sender(self, value):
        self.setUIntElement(self.offsetBits_sender(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sender'
    #
    def size_sender(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'sender'
    #
    def sizeBits_sender(self):
        return 16
    
    #
    # Accessor methods for field: phymode
    #   Field type: short
    #   Offset (bits): 48
    #   Size (bits): 8
    #

    #
    # Return whether the field 'phymode' is signed (False).
    #
    def isSigned_phymode(self):
        return False
    
    #
    # Return whether the field 'phymode' is an array (False).
    #
    def isArray_phymode(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'phymode'
    #
    def offset_phymode(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'phymode'
    #
    def offsetBits_phymode(self):
        return 48
    
    #
    # Return the value (as a short) of the field 'phymode'
    #
    def get_phymode(self):
        return self.getUIntElement(self.offsetBits_phymode(), 8, 1)
    
    #
    # Set the value of the field 'phymode'
    #
    def set_phymode(self, value):
        self.setUIntElement(self.offsetBits_phymode(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'phymode'
    #
    def size_phymode(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'phymode'
    #
    def sizeBits_phymode(self):
        return 8
    
    #
    # Accessor methods for field: ip.sent
    #   Field type: int
    #   Offset (bits): 56
    #   Size (bits): 16
    #

    #
    # Return whether the field 'ip.sent' is signed (False).
    #
    def isSigned_ip_sent(self):
        return False
    
    #
    # Return whether the field 'ip.sent' is an array (False).
    #
    def isArray_ip_sent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.sent'
    #
    def offset_ip_sent(self):
        return (56 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.sent'
    #
    def offsetBits_ip_sent(self):
        return 56
    
    #
    # Return the value (as a int) of the field 'ip.sent'
    #
    def get_ip_sent(self):
        return self.getUIntElement(self.offsetBits_ip_sent(), 16, 1)
    
    #
    # Set the value of the field 'ip.sent'
    #
    def set_ip_sent(self, value):
        self.setUIntElement(self.offsetBits_ip_sent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.sent'
    #
    def size_ip_sent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.sent'
    #
    def sizeBits_ip_sent(self):
        return 16
    
    #
    # Accessor methods for field: ip.forwarded
    #   Field type: int
    #   Offset (bits): 72
    #   Size (bits): 16
    #

    #
    # Return whether the field 'ip.forwarded' is signed (False).
    #
    def isSigned_ip_forwarded(self):
        return False
    
    #
    # Return whether the field 'ip.forwarded' is an array (False).
    #
    def isArray_ip_forwarded(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.forwarded'
    #
    def offset_ip_forwarded(self):
        return (72 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.forwarded'
    #
    def offsetBits_ip_forwarded(self):
        return 72
    
    #
    # Return the value (as a int) of the field 'ip.forwarded'
    #
    def get_ip_forwarded(self):
        return self.getUIntElement(self.offsetBits_ip_forwarded(), 16, 1)
    
    #
    # Set the value of the field 'ip.forwarded'
    #
    def set_ip_forwarded(self, value):
        self.setUIntElement(self.offsetBits_ip_forwarded(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.forwarded'
    #
    def size_ip_forwarded(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.forwarded'
    #
    def sizeBits_ip_forwarded(self):
        return 16
    
    #
    # Accessor methods for field: ip.rx_drop
    #   Field type: short
    #   Offset (bits): 88
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.rx_drop' is signed (False).
    #
    def isSigned_ip_rx_drop(self):
        return False
    
    #
    # Return whether the field 'ip.rx_drop' is an array (False).
    #
    def isArray_ip_rx_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.rx_drop'
    #
    def offset_ip_rx_drop(self):
        return (88 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.rx_drop'
    #
    def offsetBits_ip_rx_drop(self):
        return 88
    
    #
    # Return the value (as a short) of the field 'ip.rx_drop'
    #
    def get_ip_rx_drop(self):
        return self.getUIntElement(self.offsetBits_ip_rx_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.rx_drop'
    #
    def set_ip_rx_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_rx_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.rx_drop'
    #
    def size_ip_rx_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.rx_drop'
    #
    def sizeBits_ip_rx_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.tx_drop
    #   Field type: short
    #   Offset (bits): 96
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.tx_drop' is signed (False).
    #
    def isSigned_ip_tx_drop(self):
        return False
    
    #
    # Return whether the field 'ip.tx_drop' is an array (False).
    #
    def isArray_ip_tx_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.tx_drop'
    #
    def offset_ip_tx_drop(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.tx_drop'
    #
    def offsetBits_ip_tx_drop(self):
        return 96
    
    #
    # Return the value (as a short) of the field 'ip.tx_drop'
    #
    def get_ip_tx_drop(self):
        return self.getUIntElement(self.offsetBits_ip_tx_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.tx_drop'
    #
    def set_ip_tx_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_tx_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.tx_drop'
    #
    def size_ip_tx_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.tx_drop'
    #
    def sizeBits_ip_tx_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.fw_drop
    #   Field type: short
    #   Offset (bits): 104
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.fw_drop' is signed (False).
    #
    def isSigned_ip_fw_drop(self):
        return False
    
    #
    # Return whether the field 'ip.fw_drop' is an array (False).
    #
    def isArray_ip_fw_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.fw_drop'
    #
    def offset_ip_fw_drop(self):
        return (104 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.fw_drop'
    #
    def offsetBits_ip_fw_drop(self):
        return 104
    
    #
    # Return the value (as a short) of the field 'ip.fw_drop'
    #
    def get_ip_fw_drop(self):
        return self.getUIntElement(self.offsetBits_ip_fw_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.fw_drop'
    #
    def set_ip_fw_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_fw_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.fw_drop'
    #
    def size_ip_fw_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.fw_drop'
    #
    def sizeBits_ip_fw_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.rx_total
    #   Field type: short
    #   Offset (bits): 112
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.rx_total' is signed (False).
    #
    def isSigned_ip_rx_total(self):
        return False
    
    #
    # Return whether the field 'ip.rx_total' is an array (False).
    #
    def isArray_ip_rx_total(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.rx_total'
    #
    def offset_ip_rx_total(self):
        return (112 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.rx_total'
    #
    def offsetBits_ip_rx_total(self):
        return 112
    
    #
    # Return the value (as a short) of the field 'ip.rx_total'
    #
    def get_ip_rx_total(self):
        return self.getUIntElement(self.offsetBits_ip_rx_total(), 8, 1)
    
    #
    # Set the value of the field 'ip.rx_total'
    #
    def set_ip_rx_total(self, value):
        self.setUIntElement(self.offsetBits_ip_rx_total(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.rx_total'
    #
    def size_ip_rx_total(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.rx_total'
    #
    def sizeBits_ip_rx_total(self):
        return 8
    
    #
    # Accessor methods for field: ip.encfail
    #   Field type: short
    #   Offset (bits): 120
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.encfail' is signed (False).
    #
    def isSigned_ip_encfail(self):
        return False
    
    #
    # Return whether the field 'ip.encfail' is an array (False).
    #
    def isArray_ip_encfail(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.encfail'
    #
    def offset_ip_encfail(self):
        return (120 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.encfail'
    #
    def offsetBits_ip_encfail(self):
        return 120
    
    #
    # Return the value (as a short) of the field 'ip.encfail'
    #
    def get_ip_encfail(self):
        return self.getUIntElement(self.offsetBits_ip_encfail(), 8, 1)
    
    #
    # Set the value of the field 'ip.encfail'
    #
    def set_ip_encfail(self, value):
        self.setUIntElement(self.offsetBits_ip_encfail(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.encfail'
    #
    def size_ip_encfail(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.encfail'
    #
    def sizeBits_ip_encfail(self):
        return 8
    
    #
    # Accessor methods for field: udp.sent
    #   Field type: int
    #   Offset (bits): 128
    #   Size (bits): 16
    #

    #
    # Return whether the field 'udp.sent' is signed (False).
    #
    def isSigned_udp_sent(self):
        return False
    
    #
    # Return whether the field 'udp.sent' is an array (False).
    #
    def isArray_udp_sent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'udp.sent'
    #
    def offset_udp_sent(self):
        return (128 / 8)
    
    #
    # Return the offset (in bits) of the field 'udp.sent'
    #
    def offsetBits_udp_sent(self):
        return 128
    
    #
    # Return the value (as a int) of the field 'udp.sent'
    #
    def get_udp_sent(self):
        return self.getUIntElement(self.offsetBits_udp_sent(), 16, 1)
    
    #
    # Set the value of the field 'udp.sent'
    #
    def set_udp_sent(self, value):
        self.setUIntElement(self.offsetBits_udp_sent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'udp.sent'
    #
    def size_udp_sent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'udp.sent'
    #
    def sizeBits_udp_sent(self):
        return 16
    
    #
    # Accessor methods for field: udp.rcvd
    #   Field type: int
    #   Offset (bits): 144
    #   Size (bits): 16
    #

    #
    # Return whether the field 'udp.rcvd' is signed (False).
    #
    def isSigned_udp_rcvd(self):
        return False
    
    #
    # Return whether the field 'udp.rcvd' is an array (False).
    #
    def isArray_udp_rcvd(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'udp.rcvd'
    #
    def offset_udp_rcvd(self):
        return (144 / 8)
    
    #
    # Return the offset (in bits) of the field 'udp.rcvd'
    #
    def offsetBits_udp_rcvd(self):
        return 144
    
    #
    # Return the value (as a int) of the field 'udp.rcvd'
    #
    def get_udp_rcvd(self):
        return self.getUIntElement(self.offsetBits_udp_rcvd(), 16, 1)
    
    #
    # Set the value of the field 'udp.rcvd'
    #
    def set_udp_rcvd(self, value):
        self.setUIntElement(self.offsetBits_udp_rcvd(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'udp.rcvd'
    #
    def size_udp_rcvd(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'udp.rcvd'
    #
    def sizeBits_udp_rcvd(self):
        return 16
    
    #
    # Accessor methods for field: udp.cksum
    #   Field type: int
    #   Offset (bits): 160
    #   Size (bits): 16
    #

    #
    # Return whether the field 'udp.cksum' is signed (False).
    #
    def isSigned_udp_cksum(self):
        return False
    
    #
    # Return whether the field 'udp.cksum' is an array (False).
    #
    def isArray_udp_cksum(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'udp.cksum'
    #
    def offset_udp_cksum(self):
        return (160 / 8)
    
    #
    # Return the offset (in bits) of the field 'udp.cksum'
    #
    def offsetBits_udp_cksum(self):
        return 160
    
    #
    # Return the value (as a int) of the field 'udp.cksum'
    #
    def get_udp_cksum(self):
        return self.getUIntElement(self.offsetBits_udp_cksum(), 16, 1)
    
    #
    # Set the value of the field 'udp.cksum'
    #
    def set_udp_cksum(self, value):
        self.setUIntElement(self.offsetBits_udp_cksum(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'udp.cksum'
    #
    def size_udp_cksum(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'udp.cksum'
    #
    def sizeBits_udp_cksum(self):
        return 16
    
    #
    # Accessor methods for field: icmp.sol_rx
    #   Field type: short
    #   Offset (bits): 176
    #   Size (bits): 8
    #

    #
    # Return whether the field 'icmp.sol_rx' is signed (False).
    #
    def isSigned_icmp_sol_rx(self):
        return False
    
    #
    # Return whether the field 'icmp.sol_rx' is an array (False).
    #
    def isArray_icmp_sol_rx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.sol_rx'
    #
    def offset_icmp_sol_rx(self):
        return (176 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.sol_rx'
    #
    def offsetBits_icmp_sol_rx(self):
        return 176
    
    #
    # Return the value (as a short) of the field 'icmp.sol_rx'
    #
    def get_icmp_sol_rx(self):
        return self.getUIntElement(self.offsetBits_icmp_sol_rx(), 8, 1)
    
    #
    # Set the value of the field 'icmp.sol_rx'
    #
    def set_icmp_sol_rx(self, value):
        self.setUIntElement(self.offsetBits_icmp_sol_rx(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.sol_rx'
    #
    def size_icmp_sol_rx(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.sol_rx'
    #
    def sizeBits_icmp_sol_rx(self):
        return 8
    
    #
    # Accessor methods for field: icmp.sol_tx
    #   Field type: short
    #   Offset (bits): 184
    #   Size (bits): 8
    #

    #
    # Return whether the field 'icmp.sol_tx' is signed (False).
    #
    def isSigned_icmp_sol_tx(self):
        return False
    
    #
    # Return whether the field 'icmp.sol_tx' is an array (False).
    #
    def isArray_icmp_sol_tx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.sol_tx'
    #
    def offset_icmp_sol_tx(self):
        return (184 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.sol_tx'
    #
    def offsetBits_icmp_sol_tx(self):
        return 184
    
    #
    # Return the value (as a short) of the field 'icmp.sol_tx'
    #
    def get_icmp_sol_tx(self):
        return self.getUIntElement(self.offsetBits_icmp_sol_tx(), 8, 1)
    
    #
    # Set the value of the field 'icmp.sol_tx'
    #
    def set_icmp_sol_tx(self, value):
        self.setUIntElement(self.offsetBits_icmp_sol_tx(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.sol_tx'
    #
    def size_icmp_sol_tx(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.sol_tx'
    #
    def sizeBits_icmp_sol_tx(self):
        return 8
    
    #
    # Accessor methods for field: icmp.adv_rx
    #   Field type: short
    #   Offset (bits): 192
    #   Size (bits): 8
    #

    #
    # Return whether the field 'icmp.adv_rx' is signed (False).
    #
    def isSigned_icmp_adv_rx(self):
        return False
    
    #
    # Return whether the field 'icmp.adv_rx' is an array (False).
    #
    def isArray_icmp_adv_rx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.adv_rx'
    #
    def offset_icmp_adv_rx(self):
        return (192 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.adv_rx'
    #
    def offsetBits_icmp_adv_rx(self):
        return 192
    
    #
    # Return the value (as a short) of the field 'icmp.adv_rx'
    #
    def get_icmp_adv_rx(self):
        return self.getUIntElement(self.offsetBits_icmp_adv_rx(), 8, 1)
    
    #
    # Set the value of the field 'icmp.adv_rx'
    #
    def set_icmp_adv_rx(self, value):
        self.setUIntElement(self.offsetBits_icmp_adv_rx(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.adv_rx'
    #
    def size_icmp_adv_rx(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.adv_rx'
    #
    def sizeBits_icmp_adv_rx(self):
        return 8
    
    #
    # Accessor methods for field: icmp.adv_tx
    #   Field type: short
    #   Offset (bits): 200
    #   Size (bits): 8
    #

    #
    # Return whether the field 'icmp.adv_tx' is signed (False).
    #
    def isSigned_icmp_adv_tx(self):
        return False
    
    #
    # Return whether the field 'icmp.adv_tx' is an array (False).
    #
    def isArray_icmp_adv_tx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.adv_tx'
    #
    def offset_icmp_adv_tx(self):
        return (200 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.adv_tx'
    #
    def offsetBits_icmp_adv_tx(self):
        return 200
    
    #
    # Return the value (as a short) of the field 'icmp.adv_tx'
    #
    def get_icmp_adv_tx(self):
        return self.getUIntElement(self.offsetBits_icmp_adv_tx(), 8, 1)
    
    #
    # Set the value of the field 'icmp.adv_tx'
    #
    def set_icmp_adv_tx(self, value):
        self.setUIntElement(self.offsetBits_icmp_adv_tx(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.adv_tx'
    #
    def size_icmp_adv_tx(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.adv_tx'
    #
    def sizeBits_icmp_adv_tx(self):
        return 8
    
    #
    # Accessor methods for field: icmp.echo_rx
    #   Field type: short
    #   Offset (bits): 208
    #   Size (bits): 8
    #

    #
    # Return whether the field 'icmp.echo_rx' is signed (False).
    #
    def isSigned_icmp_echo_rx(self):
        return False
    
    #
    # Return whether the field 'icmp.echo_rx' is an array (False).
    #
    def isArray_icmp_echo_rx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.echo_rx'
    #
    def offset_icmp_echo_rx(self):
        return (208 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.echo_rx'
    #
    def offsetBits_icmp_echo_rx(self):
        return 208
    
    #
    # Return the value (as a short) of the field 'icmp.echo_rx'
    #
    def get_icmp_echo_rx(self):
        return self.getUIntElement(self.offsetBits_icmp_echo_rx(), 8, 1)
    
    #
    # Set the value of the field 'icmp.echo_rx'
    #
    def set_icmp_echo_rx(self, value):
        self.setUIntElement(self.offsetBits_icmp_echo_rx(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.echo_rx'
    #
    def size_icmp_echo_rx(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.echo_rx'
    #
    def sizeBits_icmp_echo_rx(self):
        return 8
    
    #
    # Accessor methods for field: icmp.echo_tx
    #   Field type: short
    #   Offset (bits): 216
    #   Size (bits): 8
    #

    #
    # Return whether the field 'icmp.echo_tx' is signed (False).
    #
    def isSigned_icmp_echo_tx(self):
        return False
    
    #
    # Return whether the field 'icmp.echo_tx' is an array (False).
    #
    def isArray_icmp_echo_tx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.echo_tx'
    #
    def offset_icmp_echo_tx(self):
        return (216 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.echo_tx'
    #
    def offsetBits_icmp_echo_tx(self):
        return 216
    
    #
    # Return the value (as a short) of the field 'icmp.echo_tx'
    #
    def get_icmp_echo_tx(self):
        return self.getUIntElement(self.offsetBits_icmp_echo_tx(), 8, 1)
    
    #
    # Set the value of the field 'icmp.echo_tx'
    #
    def set_icmp_echo_tx(self, value):
        self.setUIntElement(self.offsetBits_icmp_echo_tx(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.echo_tx'
    #
    def size_icmp_echo_tx(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.echo_tx'
    #
    def sizeBits_icmp_echo_tx(self):
        return 8
    
    #
    # Accessor methods for field: icmp.unk_rx
    #   Field type: short
    #   Offset (bits): 224
    #   Size (bits): 8
    #

    #
    # Return whether the field 'icmp.unk_rx' is signed (False).
    #
    def isSigned_icmp_unk_rx(self):
        return False
    
    #
    # Return whether the field 'icmp.unk_rx' is an array (False).
    #
    def isArray_icmp_unk_rx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.unk_rx'
    #
    def offset_icmp_unk_rx(self):
        return (224 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.unk_rx'
    #
    def offsetBits_icmp_unk_rx(self):
        return 224
    
    #
    # Return the value (as a short) of the field 'icmp.unk_rx'
    #
    def get_icmp_unk_rx(self):
        return self.getUIntElement(self.offsetBits_icmp_unk_rx(), 8, 1)
    
    #
    # Set the value of the field 'icmp.unk_rx'
    #
    def set_icmp_unk_rx(self, value):
        self.setUIntElement(self.offsetBits_icmp_unk_rx(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.unk_rx'
    #
    def size_icmp_unk_rx(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.unk_rx'
    #
    def sizeBits_icmp_unk_rx(self):
        return 8
    
    #
    # Accessor methods for field: icmp.rx
    #   Field type: int
    #   Offset (bits): 232
    #   Size (bits): 16
    #

    #
    # Return whether the field 'icmp.rx' is signed (False).
    #
    def isSigned_icmp_rx(self):
        return False
    
    #
    # Return whether the field 'icmp.rx' is an array (False).
    #
    def isArray_icmp_rx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.rx'
    #
    def offset_icmp_rx(self):
        return (232 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.rx'
    #
    def offsetBits_icmp_rx(self):
        return 232
    
    #
    # Return the value (as a int) of the field 'icmp.rx'
    #
    def get_icmp_rx(self):
        return self.getUIntElement(self.offsetBits_icmp_rx(), 16, 1)
    
    #
    # Set the value of the field 'icmp.rx'
    #
    def set_icmp_rx(self, value):
        self.setUIntElement(self.offsetBits_icmp_rx(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.rx'
    #
    def size_icmp_rx(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.rx'
    #
    def sizeBits_icmp_rx(self):
        return 16
    
    #
    # Accessor methods for field: route.hop_limit
    #   Field type: short
    #   Offset (bits): 248
    #   Size (bits): 8
    #

    #
    # Return whether the field 'route.hop_limit' is signed (False).
    #
    def isSigned_route_hop_limit(self):
        return False
    
    #
    # Return whether the field 'route.hop_limit' is an array (False).
    #
    def isArray_route_hop_limit(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.hop_limit'
    #
    def offset_route_hop_limit(self):
        return (248 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.hop_limit'
    #
    def offsetBits_route_hop_limit(self):
        return 248
    
    #
    # Return the value (as a short) of the field 'route.hop_limit'
    #
    def get_route_hop_limit(self):
        return self.getUIntElement(self.offsetBits_route_hop_limit(), 8, 1)
    
    #
    # Set the value of the field 'route.hop_limit'
    #
    def set_route_hop_limit(self, value):
        self.setUIntElement(self.offsetBits_route_hop_limit(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.hop_limit'
    #
    def size_route_hop_limit(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'route.hop_limit'
    #
    def sizeBits_route_hop_limit(self):
        return 8
    
    #
    # Accessor methods for field: route.parent
    #   Field type: int
    #   Offset (bits): 256
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent' is signed (False).
    #
    def isSigned_route_parent(self):
        return False
    
    #
    # Return whether the field 'route.parent' is an array (False).
    #
    def isArray_route_parent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent'
    #
    def offset_route_parent(self):
        return (256 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent'
    #
    def offsetBits_route_parent(self):
        return 256
    
    #
    # Return the value (as a int) of the field 'route.parent'
    #
    def get_route_parent(self):
        return self.getUIntElement(self.offsetBits_route_parent(), 16, 1)
    
    #
    # Set the value of the field 'route.parent'
    #
    def set_route_parent(self, value):
        self.setUIntElement(self.offsetBits_route_parent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent'
    #
    def size_route_parent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent'
    #
    def sizeBits_route_parent(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_metric
    #   Field type: int
    #   Offset (bits): 272
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_metric' is signed (False).
    #
    def isSigned_route_parent_metric(self):
        return False
    
    #
    # Return whether the field 'route.parent_metric' is an array (False).
    #
    def isArray_route_parent_metric(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_metric'
    #
    def offset_route_parent_metric(self):
        return (272 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_metric'
    #
    def offsetBits_route_parent_metric(self):
        return 272
    
    #
    # Return the value (as a int) of the field 'route.parent_metric'
    #
    def get_route_parent_metric(self):
        return self.getUIntElement(self.offsetBits_route_parent_metric(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_metric'
    #
    def set_route_parent_metric(self, value):
        self.setUIntElement(self.offsetBits_route_parent_metric(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_metric'
    #
    def size_route_parent_metric(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_metric'
    #
    def sizeBits_route_parent_metric(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_etx
    #   Field type: int
    #   Offset (bits): 288
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_etx' is signed (False).
    #
    def isSigned_route_parent_etx(self):
        return False
    
    #
    # Return whether the field 'route.parent_etx' is an array (False).
    #
    def isArray_route_parent_etx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_etx'
    #
    def offset_route_parent_etx(self):
        return (288 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_etx'
    #
    def offsetBits_route_parent_etx(self):
        return 288
    
    #
    # Return the value (as a int) of the field 'route.parent_etx'
    #
    def get_route_parent_etx(self):
        return self.getUIntElement(self.offsetBits_route_parent_etx(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_etx'
    #
    def set_route_parent_etx(self, value):
        self.setUIntElement(self.offsetBits_route_parent_etx(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_etx'
    #
    def size_route_parent_etx(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_etx'
    #
    def sizeBits_route_parent_etx(self):
        return 16
    
    #
    # Accessor methods for field: extra_bytes
    #   Field type: short[]
    #   Offset (bits): 304
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'extra_bytes' is signed (False).
    #
    def isSigned_extra_bytes(self):
        return False
    
    #
    # Return whether the field 'extra_bytes' is an array (True).
    #
    def isArray_extra_bytes(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'extra_bytes'
    #
    def offset_extra_bytes(self, index1):
        offset = 304
        if index1 < 0:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'extra_bytes'
    #
    def offsetBits_extra_bytes(self, index1):
        offset = 304
        if index1 < 0:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'extra_bytes' as a short[]
    #
    def get_extra_bytes(self):
        raise IndexError
    
    #
    # Set the contents of the array 'extra_bytes' from the given short[]
    #
    def set_extra_bytes(self, value):
        for index0 in range(0, len(value)):
            self.setElement_extra_bytes(index0, value[index0])

    #
    # Return an element (as a short) of the array 'extra_bytes'
    #
    def getElement_extra_bytes(self, index1):
        return self.getUIntElement(self.offsetBits_extra_bytes(index1), 8, 1)
    
    #
    # Set an element of the array 'extra_bytes'
    #
    def setElement_extra_bytes(self, index1, value):
        self.setUIntElement(self.offsetBits_extra_bytes(index1), 8, value, 1)
    
    #
    # Return the size, in bytes, of each element of the array 'extra_bytes'
    #
    def elementSize_extra_bytes(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'extra_bytes'
    #
    def elementSizeBits_extra_bytes(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'extra_bytes'
    #
    def numDimensions_extra_bytes(self):
        return 1
    
    #
    # Return the number of elements in the array 'extra_bytes'
    # for the given dimension.
    #
    def numElements_extra_bytes(self, dimension):
        array_dims = [ 0,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'extra_bytes' with a String
    #
    def setString_extra_bytes(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_extra_bytes(i, ord(s[i]));
         self.setElement_extra_bytes(l, 0) #null terminate
    
    #
    # Read the array 'extra_bytes' as a String
    #
    def getString_extra_bytes(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_extra_bytes(i) == chr(0):
                break
            carr += self.getElement_extra_bytes(i)
        return carr
    
