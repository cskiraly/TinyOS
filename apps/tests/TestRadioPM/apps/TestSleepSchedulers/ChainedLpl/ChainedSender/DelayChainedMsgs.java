/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DelayChainedMsgs'
 * message type.
 */

public class DelayChainedMsgs extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 80;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 243;

    /** Create a new DelayChainedMsgs of size 80. */
    public DelayChainedMsgs() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DelayChainedMsgs of the given data_length. */
    public DelayChainedMsgs(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DelayChainedMsgs with the given data_length
     * and base offset.
     */
    public DelayChainedMsgs(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DelayChainedMsgs using the given byte array
     * as backing store.
     */
    public DelayChainedMsgs(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DelayChainedMsgs using the given byte array
     * as backing store, with the given base offset.
     */
    public DelayChainedMsgs(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DelayChainedMsgs using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DelayChainedMsgs(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DelayChainedMsgs embedded in the given message
     * at the given base offset.
     */
    public DelayChainedMsgs(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DelayChainedMsgs embedded in the given message
     * at the given base offset and length.
     */
    public DelayChainedMsgs(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DelayChainedMsgs> \n";
      try {
        s += "  [delay=";
        for (int i = 0; i < 20; i++) {
          s += "0x"+Long.toHexString(getElement_delay(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: delay
    //   Field type: long[], unsigned
    //   Offset (bits): 0
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'delay' is signed (false).
     */
    public static boolean isSigned_delay() {
        return false;
    }

    /**
     * Return whether the field 'delay' is an array (true).
     */
    public static boolean isArray_delay() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'delay'
     */
    public static int offset_delay(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 20) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'delay'
     */
    public static int offsetBits_delay(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 20) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'delay' as a long[]
     */
    public long[] get_delay() {
        long[] tmp = new long[20];
        for (int index0 = 0; index0 < numElements_delay(0); index0++) {
            tmp[index0] = getElement_delay(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'delay' from the given long[]
     */
    public void set_delay(long[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_delay(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a long) of the array 'delay'
     */
    public long getElement_delay(int index1) {
        return (long)getUIntBEElement(offsetBits_delay(index1), 32);
    }

    /**
     * Set an element of the array 'delay'
     */
    public void setElement_delay(int index1, long value) {
        setUIntBEElement(offsetBits_delay(index1), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'delay'
     */
    public static int totalSize_delay() {
        return (640 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'delay'
     */
    public static int totalSizeBits_delay() {
        return 640;
    }

    /**
     * Return the size, in bytes, of each element of the array 'delay'
     */
    public static int elementSize_delay() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'delay'
     */
    public static int elementSizeBits_delay() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'delay'
     */
    public static int numDimensions_delay() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'delay'
     */
    public static int numElements_delay() {
        return 20;
    }

    /**
     * Return the number of elements in the array 'delay'
     * for the given dimension.
     */
    public static int numElements_delay(int dimension) {
      int array_dims[] = { 20,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
