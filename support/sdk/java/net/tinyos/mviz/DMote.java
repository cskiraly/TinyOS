/* * Copyright (c) 2006 Stanford University. * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * - Redistributions of source code must retain the above copyright *   notice, this list of conditions and the following disclaimer. * - Redistributions in binary form must reproduce the above copyright *   notice, this list of conditions and the following disclaimer in the *   documentation and/or other materials provided with the *   distribution. * - Neither the name of the Stanford University nor the names of *   its contributors may be used to endorse or promote products derived *   from this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL STANFORD * UNIVERSITY OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED * OF THE POSSIBILITY OF SUCH DAMAGE. */package net.tinyos.mviz;import java.awt.*;public class DMoteextends DShape implements DMoteModelListener{        private DDocument document;    private DMoteModel model;        public DMote(DMoteModel model, DDocument document, DLayer layer) {        super(model, document, layer);	this.document = document;	this.model = model;    }        static int counter =0;    public void paintShape() {	int x = model.getLocX();	int y = model.getLocY();	System.out.println("Mode " + layer.paintMode);    	switch(layer.paintMode){    	case DLayer.IMG:	    //g.drawImage(model.getIcon(), 5, 5, model.getWidth(layer.index), model.getHeight(layer.index), this.model.root);	    //g.drawImage(model.getIcon(), 5, 5, 200, 200, this.model.root);	    document.canvas.getGraphics().fillRect(x, y, 50, 50);	    break;    	case DLayer.OVAL:	    document.canvas.getGraphics().setColor(Color.BLACK);	    System.out.println("Draw " + counter + " oval at " + x + ", " + y + " with " + document.canvas.getGraphics().getColor() );	    counter++;	    document.canvas.getGraphics().fillOval(x, y, 10, 10);	    break;    	case DLayer.TXT_MOTE:	    document.canvas.getGraphics().setFont(new Font("Helvetica", Font.PLAIN, 8));	    document.canvas.getGraphics().setColor(Color.BLACK);	    document.canvas.getGraphics().drawString(document.sensed_motes.elementAt(layer.index) + ": " + (int)model.getValue(layer.index), x+10, y-2);	    break;	default:    	}    }}