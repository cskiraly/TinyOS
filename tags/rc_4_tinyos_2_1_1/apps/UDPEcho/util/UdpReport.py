#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'UdpReport'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 35

# The Active Message type associated with this message.
AM_TYPE = -1

class UdpReport(tinyos.message.Message.Message):
    # Create a new UdpReport of size 35.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=35):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <UdpReport> \n"
        try:
            s += "  [ip.sent=0x%x]\n" % (self.get_ip_sent())
        except:
            pass
        try:
            s += "  [ip.forwarded=0x%x]\n" % (self.get_ip_forwarded())
        except:
            pass
        try:
            s += "  [ip.rx_drop=0x%x]\n" % (self.get_ip_rx_drop())
        except:
            pass
        try:
            s += "  [ip.tx_drop=0x%x]\n" % (self.get_ip_tx_drop())
        except:
            pass
        try:
            s += "  [ip.fw_drop=0x%x]\n" % (self.get_ip_fw_drop())
        except:
            pass
        try:
            s += "  [ip.rx_total=0x%x]\n" % (self.get_ip_rx_total())
        except:
            pass
        try:
            s += "  [ip.real_drop=0x%x]\n" % (self.get_ip_real_drop())
        except:
            pass
        try:
            s += "  [ip.hlim_drop=0x%x]\n" % (self.get_ip_hlim_drop())
        except:
            pass
        try:
            s += "  [ip.senddone_el=0x%x]\n" % (self.get_ip_senddone_el())
        except:
            pass
        try:
            s += "  [ip.fragpool=0x%x]\n" % (self.get_ip_fragpool())
        except:
            pass
        try:
            s += "  [ip.sendinfo=0x%x]\n" % (self.get_ip_sendinfo())
        except:
            pass
        try:
            s += "  [ip.sendentry=0x%x]\n" % (self.get_ip_sendentry())
        except:
            pass
        try:
            s += "  [ip.sndqueue=0x%x]\n" % (self.get_ip_sndqueue())
        except:
            pass
        try:
            s += "  [ip.encfail=0x%x]\n" % (self.get_ip_encfail())
        except:
            pass
        try:
            s += "  [ip.heapfree=0x%x]\n" % (self.get_ip_heapfree())
        except:
            pass
        try:
            s += "  [udp.total=0x%x]\n" % (self.get_udp_total())
        except:
            pass
        try:
            s += "  [udp.failed=0x%x]\n" % (self.get_udp_failed())
        except:
            pass
        try:
            s += "  [udp.seqno=0x%x]\n" % (self.get_udp_seqno())
        except:
            pass
        try:
            s += "  [udp.sender=0x%x]\n" % (self.get_udp_sender())
        except:
            pass
        try:
            s += "  [icmp.rx=0x%x]\n" % (self.get_icmp_rx())
        except:
            pass
        try:
            s += "  [route.hop_limit=0x%x]\n" % (self.get_route_hop_limit())
        except:
            pass
        try:
            s += "  [route.parent=0x%x]\n" % (self.get_route_parent())
        except:
            pass
        try:
            s += "  [route.parent_metric=0x%x]\n" % (self.get_route_parent_metric())
        except:
            pass
        try:
            s += "  [route.parent_etx=0x%x]\n" % (self.get_route_parent_etx())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: ip.sent
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'ip.sent' is signed (False).
    #
    def isSigned_ip_sent(self):
        return False
    
    #
    # Return whether the field 'ip.sent' is an array (False).
    #
    def isArray_ip_sent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.sent'
    #
    def offset_ip_sent(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.sent'
    #
    def offsetBits_ip_sent(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'ip.sent'
    #
    def get_ip_sent(self):
        return self.getUIntElement(self.offsetBits_ip_sent(), 16, 1)
    
    #
    # Set the value of the field 'ip.sent'
    #
    def set_ip_sent(self, value):
        self.setUIntElement(self.offsetBits_ip_sent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.sent'
    #
    def size_ip_sent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.sent'
    #
    def sizeBits_ip_sent(self):
        return 16
    
    #
    # Accessor methods for field: ip.forwarded
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'ip.forwarded' is signed (False).
    #
    def isSigned_ip_forwarded(self):
        return False
    
    #
    # Return whether the field 'ip.forwarded' is an array (False).
    #
    def isArray_ip_forwarded(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.forwarded'
    #
    def offset_ip_forwarded(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.forwarded'
    #
    def offsetBits_ip_forwarded(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'ip.forwarded'
    #
    def get_ip_forwarded(self):
        return self.getUIntElement(self.offsetBits_ip_forwarded(), 16, 1)
    
    #
    # Set the value of the field 'ip.forwarded'
    #
    def set_ip_forwarded(self, value):
        self.setUIntElement(self.offsetBits_ip_forwarded(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.forwarded'
    #
    def size_ip_forwarded(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.forwarded'
    #
    def sizeBits_ip_forwarded(self):
        return 16
    
    #
    # Accessor methods for field: ip.rx_drop
    #   Field type: short
    #   Offset (bits): 32
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.rx_drop' is signed (False).
    #
    def isSigned_ip_rx_drop(self):
        return False
    
    #
    # Return whether the field 'ip.rx_drop' is an array (False).
    #
    def isArray_ip_rx_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.rx_drop'
    #
    def offset_ip_rx_drop(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.rx_drop'
    #
    def offsetBits_ip_rx_drop(self):
        return 32
    
    #
    # Return the value (as a short) of the field 'ip.rx_drop'
    #
    def get_ip_rx_drop(self):
        return self.getUIntElement(self.offsetBits_ip_rx_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.rx_drop'
    #
    def set_ip_rx_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_rx_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.rx_drop'
    #
    def size_ip_rx_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.rx_drop'
    #
    def sizeBits_ip_rx_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.tx_drop
    #   Field type: short
    #   Offset (bits): 40
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.tx_drop' is signed (False).
    #
    def isSigned_ip_tx_drop(self):
        return False
    
    #
    # Return whether the field 'ip.tx_drop' is an array (False).
    #
    def isArray_ip_tx_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.tx_drop'
    #
    def offset_ip_tx_drop(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.tx_drop'
    #
    def offsetBits_ip_tx_drop(self):
        return 40
    
    #
    # Return the value (as a short) of the field 'ip.tx_drop'
    #
    def get_ip_tx_drop(self):
        return self.getUIntElement(self.offsetBits_ip_tx_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.tx_drop'
    #
    def set_ip_tx_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_tx_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.tx_drop'
    #
    def size_ip_tx_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.tx_drop'
    #
    def sizeBits_ip_tx_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.fw_drop
    #   Field type: short
    #   Offset (bits): 48
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.fw_drop' is signed (False).
    #
    def isSigned_ip_fw_drop(self):
        return False
    
    #
    # Return whether the field 'ip.fw_drop' is an array (False).
    #
    def isArray_ip_fw_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.fw_drop'
    #
    def offset_ip_fw_drop(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.fw_drop'
    #
    def offsetBits_ip_fw_drop(self):
        return 48
    
    #
    # Return the value (as a short) of the field 'ip.fw_drop'
    #
    def get_ip_fw_drop(self):
        return self.getUIntElement(self.offsetBits_ip_fw_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.fw_drop'
    #
    def set_ip_fw_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_fw_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.fw_drop'
    #
    def size_ip_fw_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.fw_drop'
    #
    def sizeBits_ip_fw_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.rx_total
    #   Field type: short
    #   Offset (bits): 56
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.rx_total' is signed (False).
    #
    def isSigned_ip_rx_total(self):
        return False
    
    #
    # Return whether the field 'ip.rx_total' is an array (False).
    #
    def isArray_ip_rx_total(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.rx_total'
    #
    def offset_ip_rx_total(self):
        return (56 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.rx_total'
    #
    def offsetBits_ip_rx_total(self):
        return 56
    
    #
    # Return the value (as a short) of the field 'ip.rx_total'
    #
    def get_ip_rx_total(self):
        return self.getUIntElement(self.offsetBits_ip_rx_total(), 8, 1)
    
    #
    # Set the value of the field 'ip.rx_total'
    #
    def set_ip_rx_total(self, value):
        self.setUIntElement(self.offsetBits_ip_rx_total(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.rx_total'
    #
    def size_ip_rx_total(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.rx_total'
    #
    def sizeBits_ip_rx_total(self):
        return 8
    
    #
    # Accessor methods for field: ip.real_drop
    #   Field type: short
    #   Offset (bits): 64
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.real_drop' is signed (False).
    #
    def isSigned_ip_real_drop(self):
        return False
    
    #
    # Return whether the field 'ip.real_drop' is an array (False).
    #
    def isArray_ip_real_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.real_drop'
    #
    def offset_ip_real_drop(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.real_drop'
    #
    def offsetBits_ip_real_drop(self):
        return 64
    
    #
    # Return the value (as a short) of the field 'ip.real_drop'
    #
    def get_ip_real_drop(self):
        return self.getUIntElement(self.offsetBits_ip_real_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.real_drop'
    #
    def set_ip_real_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_real_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.real_drop'
    #
    def size_ip_real_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.real_drop'
    #
    def sizeBits_ip_real_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.hlim_drop
    #   Field type: short
    #   Offset (bits): 72
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.hlim_drop' is signed (False).
    #
    def isSigned_ip_hlim_drop(self):
        return False
    
    #
    # Return whether the field 'ip.hlim_drop' is an array (False).
    #
    def isArray_ip_hlim_drop(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.hlim_drop'
    #
    def offset_ip_hlim_drop(self):
        return (72 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.hlim_drop'
    #
    def offsetBits_ip_hlim_drop(self):
        return 72
    
    #
    # Return the value (as a short) of the field 'ip.hlim_drop'
    #
    def get_ip_hlim_drop(self):
        return self.getUIntElement(self.offsetBits_ip_hlim_drop(), 8, 1)
    
    #
    # Set the value of the field 'ip.hlim_drop'
    #
    def set_ip_hlim_drop(self, value):
        self.setUIntElement(self.offsetBits_ip_hlim_drop(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.hlim_drop'
    #
    def size_ip_hlim_drop(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.hlim_drop'
    #
    def sizeBits_ip_hlim_drop(self):
        return 8
    
    #
    # Accessor methods for field: ip.senddone_el
    #   Field type: short
    #   Offset (bits): 80
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.senddone_el' is signed (False).
    #
    def isSigned_ip_senddone_el(self):
        return False
    
    #
    # Return whether the field 'ip.senddone_el' is an array (False).
    #
    def isArray_ip_senddone_el(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.senddone_el'
    #
    def offset_ip_senddone_el(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.senddone_el'
    #
    def offsetBits_ip_senddone_el(self):
        return 80
    
    #
    # Return the value (as a short) of the field 'ip.senddone_el'
    #
    def get_ip_senddone_el(self):
        return self.getUIntElement(self.offsetBits_ip_senddone_el(), 8, 1)
    
    #
    # Set the value of the field 'ip.senddone_el'
    #
    def set_ip_senddone_el(self, value):
        self.setUIntElement(self.offsetBits_ip_senddone_el(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.senddone_el'
    #
    def size_ip_senddone_el(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.senddone_el'
    #
    def sizeBits_ip_senddone_el(self):
        return 8
    
    #
    # Accessor methods for field: ip.fragpool
    #   Field type: short
    #   Offset (bits): 88
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.fragpool' is signed (False).
    #
    def isSigned_ip_fragpool(self):
        return False
    
    #
    # Return whether the field 'ip.fragpool' is an array (False).
    #
    def isArray_ip_fragpool(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.fragpool'
    #
    def offset_ip_fragpool(self):
        return (88 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.fragpool'
    #
    def offsetBits_ip_fragpool(self):
        return 88
    
    #
    # Return the value (as a short) of the field 'ip.fragpool'
    #
    def get_ip_fragpool(self):
        return self.getUIntElement(self.offsetBits_ip_fragpool(), 8, 1)
    
    #
    # Set the value of the field 'ip.fragpool'
    #
    def set_ip_fragpool(self, value):
        self.setUIntElement(self.offsetBits_ip_fragpool(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.fragpool'
    #
    def size_ip_fragpool(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.fragpool'
    #
    def sizeBits_ip_fragpool(self):
        return 8
    
    #
    # Accessor methods for field: ip.sendinfo
    #   Field type: short
    #   Offset (bits): 96
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.sendinfo' is signed (False).
    #
    def isSigned_ip_sendinfo(self):
        return False
    
    #
    # Return whether the field 'ip.sendinfo' is an array (False).
    #
    def isArray_ip_sendinfo(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.sendinfo'
    #
    def offset_ip_sendinfo(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.sendinfo'
    #
    def offsetBits_ip_sendinfo(self):
        return 96
    
    #
    # Return the value (as a short) of the field 'ip.sendinfo'
    #
    def get_ip_sendinfo(self):
        return self.getUIntElement(self.offsetBits_ip_sendinfo(), 8, 1)
    
    #
    # Set the value of the field 'ip.sendinfo'
    #
    def set_ip_sendinfo(self, value):
        self.setUIntElement(self.offsetBits_ip_sendinfo(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.sendinfo'
    #
    def size_ip_sendinfo(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.sendinfo'
    #
    def sizeBits_ip_sendinfo(self):
        return 8
    
    #
    # Accessor methods for field: ip.sendentry
    #   Field type: short
    #   Offset (bits): 104
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.sendentry' is signed (False).
    #
    def isSigned_ip_sendentry(self):
        return False
    
    #
    # Return whether the field 'ip.sendentry' is an array (False).
    #
    def isArray_ip_sendentry(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.sendentry'
    #
    def offset_ip_sendentry(self):
        return (104 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.sendentry'
    #
    def offsetBits_ip_sendentry(self):
        return 104
    
    #
    # Return the value (as a short) of the field 'ip.sendentry'
    #
    def get_ip_sendentry(self):
        return self.getUIntElement(self.offsetBits_ip_sendentry(), 8, 1)
    
    #
    # Set the value of the field 'ip.sendentry'
    #
    def set_ip_sendentry(self, value):
        self.setUIntElement(self.offsetBits_ip_sendentry(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.sendentry'
    #
    def size_ip_sendentry(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.sendentry'
    #
    def sizeBits_ip_sendentry(self):
        return 8
    
    #
    # Accessor methods for field: ip.sndqueue
    #   Field type: short
    #   Offset (bits): 112
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.sndqueue' is signed (False).
    #
    def isSigned_ip_sndqueue(self):
        return False
    
    #
    # Return whether the field 'ip.sndqueue' is an array (False).
    #
    def isArray_ip_sndqueue(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.sndqueue'
    #
    def offset_ip_sndqueue(self):
        return (112 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.sndqueue'
    #
    def offsetBits_ip_sndqueue(self):
        return 112
    
    #
    # Return the value (as a short) of the field 'ip.sndqueue'
    #
    def get_ip_sndqueue(self):
        return self.getUIntElement(self.offsetBits_ip_sndqueue(), 8, 1)
    
    #
    # Set the value of the field 'ip.sndqueue'
    #
    def set_ip_sndqueue(self, value):
        self.setUIntElement(self.offsetBits_ip_sndqueue(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.sndqueue'
    #
    def size_ip_sndqueue(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.sndqueue'
    #
    def sizeBits_ip_sndqueue(self):
        return 8
    
    #
    # Accessor methods for field: ip.encfail
    #   Field type: short
    #   Offset (bits): 120
    #   Size (bits): 8
    #

    #
    # Return whether the field 'ip.encfail' is signed (False).
    #
    def isSigned_ip_encfail(self):
        return False
    
    #
    # Return whether the field 'ip.encfail' is an array (False).
    #
    def isArray_ip_encfail(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.encfail'
    #
    def offset_ip_encfail(self):
        return (120 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.encfail'
    #
    def offsetBits_ip_encfail(self):
        return 120
    
    #
    # Return the value (as a short) of the field 'ip.encfail'
    #
    def get_ip_encfail(self):
        return self.getUIntElement(self.offsetBits_ip_encfail(), 8, 1)
    
    #
    # Set the value of the field 'ip.encfail'
    #
    def set_ip_encfail(self, value):
        self.setUIntElement(self.offsetBits_ip_encfail(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.encfail'
    #
    def size_ip_encfail(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.encfail'
    #
    def sizeBits_ip_encfail(self):
        return 8
    
    #
    # Accessor methods for field: ip.heapfree
    #   Field type: int
    #   Offset (bits): 128
    #   Size (bits): 16
    #

    #
    # Return whether the field 'ip.heapfree' is signed (False).
    #
    def isSigned_ip_heapfree(self):
        return False
    
    #
    # Return whether the field 'ip.heapfree' is an array (False).
    #
    def isArray_ip_heapfree(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'ip.heapfree'
    #
    def offset_ip_heapfree(self):
        return (128 / 8)
    
    #
    # Return the offset (in bits) of the field 'ip.heapfree'
    #
    def offsetBits_ip_heapfree(self):
        return 128
    
    #
    # Return the value (as a int) of the field 'ip.heapfree'
    #
    def get_ip_heapfree(self):
        return self.getUIntElement(self.offsetBits_ip_heapfree(), 16, 1)
    
    #
    # Set the value of the field 'ip.heapfree'
    #
    def set_ip_heapfree(self, value):
        self.setUIntElement(self.offsetBits_ip_heapfree(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'ip.heapfree'
    #
    def size_ip_heapfree(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'ip.heapfree'
    #
    def sizeBits_ip_heapfree(self):
        return 16
    
    #
    # Accessor methods for field: udp.total
    #   Field type: int
    #   Offset (bits): 144
    #   Size (bits): 16
    #

    #
    # Return whether the field 'udp.total' is signed (False).
    #
    def isSigned_udp_total(self):
        return False
    
    #
    # Return whether the field 'udp.total' is an array (False).
    #
    def isArray_udp_total(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'udp.total'
    #
    def offset_udp_total(self):
        return (144 / 8)
    
    #
    # Return the offset (in bits) of the field 'udp.total'
    #
    def offsetBits_udp_total(self):
        return 144
    
    #
    # Return the value (as a int) of the field 'udp.total'
    #
    def get_udp_total(self):
        return self.getUIntElement(self.offsetBits_udp_total(), 16, 1)
    
    #
    # Set the value of the field 'udp.total'
    #
    def set_udp_total(self, value):
        self.setUIntElement(self.offsetBits_udp_total(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'udp.total'
    #
    def size_udp_total(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'udp.total'
    #
    def sizeBits_udp_total(self):
        return 16
    
    #
    # Accessor methods for field: udp.failed
    #   Field type: int
    #   Offset (bits): 160
    #   Size (bits): 16
    #

    #
    # Return whether the field 'udp.failed' is signed (False).
    #
    def isSigned_udp_failed(self):
        return False
    
    #
    # Return whether the field 'udp.failed' is an array (False).
    #
    def isArray_udp_failed(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'udp.failed'
    #
    def offset_udp_failed(self):
        return (160 / 8)
    
    #
    # Return the offset (in bits) of the field 'udp.failed'
    #
    def offsetBits_udp_failed(self):
        return 160
    
    #
    # Return the value (as a int) of the field 'udp.failed'
    #
    def get_udp_failed(self):
        return self.getUIntElement(self.offsetBits_udp_failed(), 16, 1)
    
    #
    # Set the value of the field 'udp.failed'
    #
    def set_udp_failed(self, value):
        self.setUIntElement(self.offsetBits_udp_failed(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'udp.failed'
    #
    def size_udp_failed(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'udp.failed'
    #
    def sizeBits_udp_failed(self):
        return 16
    
    #
    # Accessor methods for field: udp.seqno
    #   Field type: int
    #   Offset (bits): 176
    #   Size (bits): 16
    #

    #
    # Return whether the field 'udp.seqno' is signed (False).
    #
    def isSigned_udp_seqno(self):
        return False
    
    #
    # Return whether the field 'udp.seqno' is an array (False).
    #
    def isArray_udp_seqno(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'udp.seqno'
    #
    def offset_udp_seqno(self):
        return (176 / 8)
    
    #
    # Return the offset (in bits) of the field 'udp.seqno'
    #
    def offsetBits_udp_seqno(self):
        return 176
    
    #
    # Return the value (as a int) of the field 'udp.seqno'
    #
    def get_udp_seqno(self):
        return self.getUIntElement(self.offsetBits_udp_seqno(), 16, 1)
    
    #
    # Set the value of the field 'udp.seqno'
    #
    def set_udp_seqno(self, value):
        self.setUIntElement(self.offsetBits_udp_seqno(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'udp.seqno'
    #
    def size_udp_seqno(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'udp.seqno'
    #
    def sizeBits_udp_seqno(self):
        return 16
    
    #
    # Accessor methods for field: udp.sender
    #   Field type: int
    #   Offset (bits): 192
    #   Size (bits): 16
    #

    #
    # Return whether the field 'udp.sender' is signed (False).
    #
    def isSigned_udp_sender(self):
        return False
    
    #
    # Return whether the field 'udp.sender' is an array (False).
    #
    def isArray_udp_sender(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'udp.sender'
    #
    def offset_udp_sender(self):
        return (192 / 8)
    
    #
    # Return the offset (in bits) of the field 'udp.sender'
    #
    def offsetBits_udp_sender(self):
        return 192
    
    #
    # Return the value (as a int) of the field 'udp.sender'
    #
    def get_udp_sender(self):
        return self.getUIntElement(self.offsetBits_udp_sender(), 16, 1)
    
    #
    # Set the value of the field 'udp.sender'
    #
    def set_udp_sender(self, value):
        self.setUIntElement(self.offsetBits_udp_sender(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'udp.sender'
    #
    def size_udp_sender(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'udp.sender'
    #
    def sizeBits_udp_sender(self):
        return 16
    
    #
    # Accessor methods for field: icmp.rx
    #   Field type: int
    #   Offset (bits): 208
    #   Size (bits): 16
    #

    #
    # Return whether the field 'icmp.rx' is signed (False).
    #
    def isSigned_icmp_rx(self):
        return False
    
    #
    # Return whether the field 'icmp.rx' is an array (False).
    #
    def isArray_icmp_rx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'icmp.rx'
    #
    def offset_icmp_rx(self):
        return (208 / 8)
    
    #
    # Return the offset (in bits) of the field 'icmp.rx'
    #
    def offsetBits_icmp_rx(self):
        return 208
    
    #
    # Return the value (as a int) of the field 'icmp.rx'
    #
    def get_icmp_rx(self):
        return self.getUIntElement(self.offsetBits_icmp_rx(), 16, 1)
    
    #
    # Set the value of the field 'icmp.rx'
    #
    def set_icmp_rx(self, value):
        self.setUIntElement(self.offsetBits_icmp_rx(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'icmp.rx'
    #
    def size_icmp_rx(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'icmp.rx'
    #
    def sizeBits_icmp_rx(self):
        return 16
    
    #
    # Accessor methods for field: route.hop_limit
    #   Field type: short
    #   Offset (bits): 224
    #   Size (bits): 8
    #

    #
    # Return whether the field 'route.hop_limit' is signed (False).
    #
    def isSigned_route_hop_limit(self):
        return False
    
    #
    # Return whether the field 'route.hop_limit' is an array (False).
    #
    def isArray_route_hop_limit(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.hop_limit'
    #
    def offset_route_hop_limit(self):
        return (224 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.hop_limit'
    #
    def offsetBits_route_hop_limit(self):
        return 224
    
    #
    # Return the value (as a short) of the field 'route.hop_limit'
    #
    def get_route_hop_limit(self):
        return self.getUIntElement(self.offsetBits_route_hop_limit(), 8, 1)
    
    #
    # Set the value of the field 'route.hop_limit'
    #
    def set_route_hop_limit(self, value):
        self.setUIntElement(self.offsetBits_route_hop_limit(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.hop_limit'
    #
    def size_route_hop_limit(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'route.hop_limit'
    #
    def sizeBits_route_hop_limit(self):
        return 8
    
    #
    # Accessor methods for field: route.parent
    #   Field type: int
    #   Offset (bits): 232
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent' is signed (False).
    #
    def isSigned_route_parent(self):
        return False
    
    #
    # Return whether the field 'route.parent' is an array (False).
    #
    def isArray_route_parent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent'
    #
    def offset_route_parent(self):
        return (232 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent'
    #
    def offsetBits_route_parent(self):
        return 232
    
    #
    # Return the value (as a int) of the field 'route.parent'
    #
    def get_route_parent(self):
        return self.getUIntElement(self.offsetBits_route_parent(), 16, 1)
    
    #
    # Set the value of the field 'route.parent'
    #
    def set_route_parent(self, value):
        self.setUIntElement(self.offsetBits_route_parent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent'
    #
    def size_route_parent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent'
    #
    def sizeBits_route_parent(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_metric
    #   Field type: int
    #   Offset (bits): 248
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_metric' is signed (False).
    #
    def isSigned_route_parent_metric(self):
        return False
    
    #
    # Return whether the field 'route.parent_metric' is an array (False).
    #
    def isArray_route_parent_metric(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_metric'
    #
    def offset_route_parent_metric(self):
        return (248 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_metric'
    #
    def offsetBits_route_parent_metric(self):
        return 248
    
    #
    # Return the value (as a int) of the field 'route.parent_metric'
    #
    def get_route_parent_metric(self):
        return self.getUIntElement(self.offsetBits_route_parent_metric(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_metric'
    #
    def set_route_parent_metric(self, value):
        self.setUIntElement(self.offsetBits_route_parent_metric(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_metric'
    #
    def size_route_parent_metric(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_metric'
    #
    def sizeBits_route_parent_metric(self):
        return 16
    
    #
    # Accessor methods for field: route.parent_etx
    #   Field type: int
    #   Offset (bits): 264
    #   Size (bits): 16
    #

    #
    # Return whether the field 'route.parent_etx' is signed (False).
    #
    def isSigned_route_parent_etx(self):
        return False
    
    #
    # Return whether the field 'route.parent_etx' is an array (False).
    #
    def isArray_route_parent_etx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'route.parent_etx'
    #
    def offset_route_parent_etx(self):
        return (264 / 8)
    
    #
    # Return the offset (in bits) of the field 'route.parent_etx'
    #
    def offsetBits_route_parent_etx(self):
        return 264
    
    #
    # Return the value (as a int) of the field 'route.parent_etx'
    #
    def get_route_parent_etx(self):
        return self.getUIntElement(self.offsetBits_route_parent_etx(), 16, 1)
    
    #
    # Set the value of the field 'route.parent_etx'
    #
    def set_route_parent_etx(self, value):
        self.setUIntElement(self.offsetBits_route_parent_etx(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'route.parent_etx'
    #
    def size_route_parent_etx(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'route.parent_etx'
    #
    def sizeBits_route_parent_etx(self):
        return 16
    
